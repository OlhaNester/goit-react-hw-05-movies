{"version":3,"file":"static/js/529.507bdb8d.chunk.js","mappings":"gMAEaA,E,QAAkBC,GAAAA,IAAH,iE,SCW5B,EALe,WACX,OAAQ,SAACD,EAAD,WAAiB,SAACE,EAAA,EAAD,CAAiBC,MAAM,UAAUC,KAAK,KAAKC,MAAM,Y,uMCPjEC,EAAiBL,EAAAA,GAAAA,IAAH,+OAoBdM,EAAgBN,EAAAA,GAAAA,IAAH,+C,mBCiC1B,EAlDqB,SAAC,GAAe,IAAbO,EAAY,EAAZA,MACdC,EAAqED,EAArEC,YAAaC,EAAwDF,EAAxDE,MAAOC,EAAiDH,EAAjDG,aAAcC,EAAmCJ,EAAnCI,aAAcC,EAAqBL,EAArBK,SAAUC,EAAWN,EAAXM,OAC5DC,GAAWC,EAAAA,EAAAA,MAEXC,EAAU,0CAAsCR,GACtD,OACE,UAACH,EAAD,WACGG,GAAe,gBAAKS,IAAKD,EAAYE,MAAM,MAAMC,IAAI,MAAS,gBAAKF,IAAKG,EAAcF,MAAM,MAAMC,IAAI,MACvG,UAACb,EAAD,YACE,wBAAKG,KACL,0BAAOC,EAAaW,MAAM,EAAG,MAC7B,0CAAkBV,EAAlB,SACA,4BACE,sCACA,uBAAIC,KACJ,oCACA,wBACGC,EAAOS,KAAI,SAACC,GAAD,OACV,wBAAoBA,EAAMC,MAAjBD,EAAME,aAIrB,oBACA,mDACA,SAAC,KAAD,CAAMC,GAAE,OAAUC,MAAO,CAAEC,KAAMd,EAASa,MAAMC,MAAhD,mBAGA,mBACA,SAAC,KAAD,CAAMF,GAAE,UAAaC,MAAO,CAAEC,KAAMd,EAASa,MAAMC,MAAnD,2B,UC9BKC,EAAW,WAAO,IAAD,IACtBf,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAAC,KAAD,CAAMW,GAAE,iBAAEZ,QAAF,IAAEA,GAAF,UAAEA,EAAUa,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAnC,UACE,oBAAQE,KAAK,SAAb,WACE,SAAC,MAAD,IADF,gBCIOC,EAAmB,WAC9B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACP,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAO3B,EAAP,KAAc4B,EAAd,KACD,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAkBA,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8GAEwBC,EAAAA,EAAAA,IAAaP,GAFrC,OAEUzB,EAFV,OAII4B,EAAS5B,GAJb,gDAMIiC,EAAAA,GAAAA,MAAY,sBANhB,yBAOaH,GAAW,GAPxB,qFAFc,sBACdA,GAAW,GADG,mCAWdI,CAAWT,KACV,CAACA,KAGF,gCACGI,IAAW,SAACM,EAAA,EAAD,KACVN,IAAW,SAACP,EAAD,IAGZtB,IAAS,SAAC,EAAD,CAAcA,MAAOA,KAC/B,SAAC,KAAD,KACA,SAAC,KAAD,S","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","components/BackLink/BackLink.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const LoaderContainer = styled.div`\r\nmargin-left: auto;\r\n  margin-right: auto;`","import { SpinnerCircular } from 'spinners-react';\r\nimport {LoaderContainer} from './Loader.styled';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Loader = () => {\r\n    return (<LoaderContainer><SpinnerCircular color=\"#00BFFF\" size=\"50\" speed=\"100\" />\r\n    </LoaderContainer>);\r\n}\r\n \r\nexport default Loader;\r\n","import styled from \"styled-components\";\r\n\r\nexport const MovieContainer = styled.div`\r\n  display: flex;\r\n\r\n  img {\r\n    display: block;\r\n    max-width: 100%;\r\n    height: auto;\r\n  }\r\n  ul {\r\n    padding: 0;\r\n  }\r\n  li {\r\n    list-style-type: none;\r\n    padding: 0;\r\n  }\r\n  p {\r\n    margin: 16px;\r\n  }\r\n`;\r\n\r\nexport const InfoContainer = styled.div`\r\n  text-align: center;\r\n`;\r\n","import { Link, useLocation } from \"react-router-dom\";\r\nimport { MovieContainer, InfoContainer } from \"./MovieDetails.styled\";\r\nimport defaultMovie from \"../../components/defaultMovie.jpg\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst MovieDetails = ({ movie }) => {\r\n  const { poster_path, title, release_date, vote_average, overview, genres } = movie;\r\n  const location = useLocation();\r\n\r\n  const linkPoster = `https://image.tmdb.org/t/p/w500/${poster_path}`;\r\n  return (\r\n    <MovieContainer>\r\n      {poster_path ? (<img src={linkPoster} width=\"300\" alt=\"\" />): (<img src={defaultMovie} width=\"300\" alt=\"\" />)}\r\n      <InfoContainer>\r\n        <h2>{title}</h2>\r\n        <span>{release_date.slice(0, 4)}</span>\r\n        <div>User Score: {vote_average} %</div>\r\n        <div>\r\n          <h4>Overview</h4>\r\n          <p>{overview}</p>\r\n          <h4>Genres</h4>\r\n          <ul>\r\n            {genres.map((genre) => (\r\n              <li key={genre.id}>{genre.name}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <div></div>\r\n        <h3>Additional infomation</h3>\r\n        <Link to={`cast`} state={{ from: location.state.from }}>\r\n          Cast\r\n        </Link>\r\n        <br />\r\n        <Link to={`reviews`} state={{ from: location.state.from }}>\r\n          Review\r\n        </Link>\r\n      </InfoContainer>\r\n    </MovieContainer>\r\n  );\r\n};\r\n\r\nMovieDetails.propTypes = {\r\n  movie: PropTypes.shape({\r\n    poster_path:  PropTypes.string,\r\n    title: PropTypes.string,\r\n    release_date: PropTypes.string,\r\n    vote_average: PropTypes.number,\r\n    overview: PropTypes.string,\r\ngenres: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.number,\r\n        name: PropTypes.string,\r\n      }))\r\n  }),\r\n};\r\nexport default MovieDetails;\r\n","import { Link, useLocation } from \"react-router-dom\";\r\nimport { FaArrowLeft } from \"react-icons/fa\";\r\n\r\nexport const BackLink = () => {\r\n  const location = useLocation();\r\n  return (\r\n    <Link to={location?.state?.from ?? \"/\"}>\r\n      <button type=\"button\">\r\n        <FaArrowLeft />\r\n      Go back\r\n      </button>\r\n    </Link>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useParams, Link, Outlet,  } from \"react-router-dom\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport Loader from '../../components/Loader/Loader';\r\n\r\nimport { getMovieById } from \"../../services/moviesApi\";\r\nimport MovieDetails from \"../../components/MovieDetails/MovieDetails\";\r\nimport {BackLink} from '../../components/BackLink/BackLink';\r\n\r\n\r\n\r\nexport const MovieDetailsPage = () => {\r\n  const { movieId } = useParams();\r\n   const [movie, setMovie] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n \r\n\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    async function fetchMovie() {\r\n      try {\r\n        const movie = await getMovieById(movieId);\r\n\r\n        setMovie(movie);\r\n      } catch (error) {\r\n        toast.error(\"Movie is not found\");\r\n      } finally {setLoading(false)};\r\n    }\r\n    fetchMovie(movieId);\r\n  }, [movieId]);\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {!loading && <BackLink />}\r\n      \r\n      \r\n      {movie && <MovieDetails movie={movie}  />}\r\n      <Toaster />\r\n      <Outlet/>\r\n    </>\r\n  );\r\n};\r\n\r\n"],"names":["LoaderContainer","styled","SpinnerCircular","color","size","speed","MovieContainer","InfoContainer","movie","poster_path","title","release_date","vote_average","overview","genres","location","useLocation","linkPoster","src","width","alt","defaultMovie","slice","map","genre","name","id","to","state","from","BackLink","type","MovieDetailsPage","movieId","useParams","useState","setMovie","loading","setLoading","useEffect","getMovieById","toast","fetchMovie","Loader"],"sourceRoot":""}